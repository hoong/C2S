// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2s.proto

#ifndef PROTOBUF_c2s_2eproto__INCLUDED
#define PROTOBUF_c2s_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace c2s {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_c2s_2eproto();
void protobuf_AssignDesc_c2s_2eproto();
void protobuf_ShutdownFile_c2s_2eproto();

class IMRequest;

// ===================================================================

class IMRequest : public ::google::protobuf::Message {
 public:
  IMRequest();
  virtual ~IMRequest();
  
  IMRequest(const IMRequest& from);
  
  inline IMRequest& operator=(const IMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMRequest& default_instance();
  
  void Swap(IMRequest* other);
  
  // implements Message ----------------------------------------------
  
  IMRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMRequest& from);
  void MergeFrom(const IMRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string im_session = 1;
  inline bool has_im_session() const;
  inline void clear_im_session();
  static const int kImSessionFieldNumber = 1;
  inline const ::std::string& im_session() const;
  inline void set_im_session(const ::std::string& value);
  inline void set_im_session(const char* value);
  inline void set_im_session(const char* value, size_t size);
  inline ::std::string* mutable_im_session();
  inline ::std::string* release_im_session();
  
  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:c2s.rpc.IMRequest)
 private:
  inline void set_has_im_session();
  inline void clear_has_im_session();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* im_session_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_c2s_2eproto();
  friend void protobuf_AssignDesc_c2s_2eproto();
  friend void protobuf_ShutdownFile_c2s_2eproto();
  
  void InitAsDefaultInstance();
  static IMRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// IMRequest

// optional string im_session = 1;
inline bool IMRequest::has_im_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRequest::set_has_im_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRequest::clear_has_im_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRequest::clear_im_session() {
  if (im_session_ != &::google::protobuf::internal::kEmptyString) {
    im_session_->clear();
  }
  clear_has_im_session();
}
inline const ::std::string& IMRequest::im_session() const {
  return *im_session_;
}
inline void IMRequest::set_im_session(const ::std::string& value) {
  set_has_im_session();
  if (im_session_ == &::google::protobuf::internal::kEmptyString) {
    im_session_ = new ::std::string;
  }
  im_session_->assign(value);
}
inline void IMRequest::set_im_session(const char* value) {
  set_has_im_session();
  if (im_session_ == &::google::protobuf::internal::kEmptyString) {
    im_session_ = new ::std::string;
  }
  im_session_->assign(value);
}
inline void IMRequest::set_im_session(const char* value, size_t size) {
  set_has_im_session();
  if (im_session_ == &::google::protobuf::internal::kEmptyString) {
    im_session_ = new ::std::string;
  }
  im_session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMRequest::mutable_im_session() {
  set_has_im_session();
  if (im_session_ == &::google::protobuf::internal::kEmptyString) {
    im_session_ = new ::std::string;
  }
  return im_session_;
}
inline ::std::string* IMRequest::release_im_session() {
  clear_has_im_session();
  if (im_session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = im_session_;
    im_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes data = 2;
inline bool IMRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& IMRequest::data() const {
  return *data_;
}
inline void IMRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void IMRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void IMRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* IMRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace c2s

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c2s_2eproto__INCLUDED
